plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'com.jfrog.artifactory' version '4.8.1'
}
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'digital.wup.android-maven-publish'

android {
    buildToolsVersion '28.0.3'
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 28
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    lintOptions {
        checkAllWarnings true
        lintConfig rootProject.file('gradle/lint.xml')
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
        }
        release {
            minifyEnabled true
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
        }
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        // Warn about deprecations
        //options.compilerArgs << '-Xlint:deprecation'
        // Warn about unchecked usages
        options.compilerArgs << '-Xlint:unchecked'
        // Don't warn about using source/target 1.5 option
        options.compilerArgs << '-Xlint:-options'

        options.debug(['debugLevel': 'source,lines,vars'])
        options.debug = VERSION_NAME.contains('SNAPSHOT')
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

release {
    tagTemplate = 'v_${version}'
    preTagCommitMessage = ':cloud: Release'
    tagCommitMessage = ':cloud: Release'
    newVersionCommitMessage = ':cloud: Bump'

    versionPropertyFile = '../gradle.properties'
    versionProperties = ['VERSION_NAME']

    git {
        requireBranch = ''
    }
}

dependencies {
    testImplementation('junit:junit:4.12') {
        exclude(module: 'hamcrest-core')
    }

    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.robolectric:robolectric:4.0.2'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'joda-time:joda-time:2.10.1'

    // This dep is required when using Robolectric and targeting pre-21 SDKs.
    // Otherwise, tests fail with java.lang.NoClassDefFoundError.
    // https://github.com/robolectric/robolectric/issues/2562#issuecomment-263086503
    testImplementation 'org.robolectric:android-all:8.1.0-robolectric-r4458339'
    testImplementation 'com.icegreen:greenmail:1.5.9'
    testImplementation 'dom4j:dom4j:1.6.1'
    testImplementation 'org.easytesting:fest-assert:1.4'
    testImplementation "org.slf4j:integration:${slf4jVersion}"
    testImplementation "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}:tests"
    testImplementation "org.slf4j:slf4j-ext:${slf4jVersion}"
    testImplementation(group: 'org.subethamail', name: 'subethasmtp', version: '3.1.7') {
        exclude(module: 'slf4j-api')
    }

    compileOnly "org.slf4j:slf4j-api:${slf4jVersion}"

    // For SMTPAppender
    compileOnly 'com.sun.mail:android-mail:1.6.3'
    compileOnly 'com.sun.mail:android-activation:1.6.3'

    testImplementation 'ch.qos.cal10n:cal10n-api:0.8.1'
    testAnnotationProcessor 'ch.qos.cal10n:cal10n-api:0.8.1'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
    group = 'build'
}

task generateJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
    group = 'build'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task generateJavadocJar(type: Jar) {
    from generateJavadoc
    classifier 'javadoc'
    group = 'build'
}

publishing {
    publications {
        logbackAndroid(MavenPublication) {
            from components.android
            artifact generateJavadocJar
            artifact generateSourcesJar

            groupId GROUP
            version VERSION_NAME

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION.replaceAll('"', '')
                url = POM_URL

                licenses {
// TODO: Use license config from gradle.properties when ready to switch to Apache License.
//                        license {
//                            name POM_LICENCE_NAME
//                            url POM_LICENCE_URL
//                            distribution POM_LICENCE_DIST
//                        }
                    license {
                        name = 'Eclipse Public License, Version 1.0'
                        url = 'https://www.eclipse.org/legal/epl-v10.html'
                        distribution = POM_LICENCE_DIST
                    }
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'http://www.gnu.org/licenses/lgpl-2.1.html'
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME.replaceAll('"', '')
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (!it.properties.excludeRules.empty) {
                            def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            it.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                }

                configurations.compileOnly.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'provided')

                        if (!it.properties.excludeRules.empty) {
                            def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            it.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = rootProject.hasProperty('BINTRAY_USER') ? BINTRAY_USER : System.getenv('BINTRAY_USER')
    key = rootProject.hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : System.getenv('BINTRAY_KEY')
    publications = ['logbackAndroid']

    publish = false // true
    override = true

    pkg {
        repo = 'maven'
        name = "${GROUP}:${POM_NAME}"
        licenses = ['EPL-1.0', 'LGPL-2.1']
        labels = ['android', 'logging']
        websiteUrl = POM_URL
        issueTrackerUrl = POM_SCM_ISSUES_URL
        vcsUrl = POM_SCM_URL
        githubRepo = POM_SCM_URL

        version {
            name = VERSION_NAME
            released  = new Date()
            vcsTag = "v_${VERSION_NAME}"
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
                user = project.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('NEXUS_USERNAME')
                password = project.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('NEXUS_PASSWORD')
                close = '0' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = rootProject.hasProperty('BINTRAY_USER') ? BINTRAY_USER : System.getenv('BINTRAY_USER')
            password = rootProject.hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('logbackAndroid')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
}